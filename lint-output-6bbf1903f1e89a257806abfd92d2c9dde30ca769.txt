notebooks/popu_incomepredict-tmp.py:176:61: W504 line break after binary operator
    return max(row['2022'] * (1 + (1.5 * row['growthrate']) *
                                                            ^
notebooks/popu_incomepredict-tmp.py:186:61: W504 line break after binary operator
    return max(row['2023'] * (1 + (1.5 * row['growthrate']) *
                                                            ^
notebooks/popu_incomepredict-tmp.py:196:61: W504 line break after binary operator
    return max(row['2024'] * (1 + (1.5 * row['growthrate']) *
                                                            ^
notebooks/Crime_Rate-tmp.py:4:123: E251 unexpected spaces around keyword / parameter equals
df_crime = pd.read_excel('../data/raw/Data_Tables_LGA_Recorded_Offences_Year_Ending_June_2022.xlsx', 'Table 03', index_col = None)
                                                                                                                          ^
notebooks/Crime_Rate-tmp.py:4:125: E251 unexpected spaces around keyword / parameter equals
df_crime = pd.read_excel('../data/raw/Data_Tables_LGA_Recorded_Offences_Year_Ending_June_2022.xlsx', 'Table 03', index_col = None)
                                                                                                                            ^
notebooks/Crime_Rate-tmp.py:12:21: E231 missing whitespace after ','
col = ['Year ending','Local Government Area','Suburb/Town Name','Offence Division','Offence Subdivision','Offence Subgroup']
                    ^
notebooks/Crime_Rate-tmp.py:12:45: E231 missing whitespace after ','
col = ['Year ending','Local Government Area','Suburb/Town Name','Offence Division','Offence Subdivision','Offence Subgroup']
                                            ^
notebooks/Crime_Rate-tmp.py:12:64: E231 missing whitespace after ','
col = ['Year ending','Local Government Area','Suburb/Town Name','Offence Division','Offence Subdivision','Offence Subgroup']
                                                               ^
notebooks/Crime_Rate-tmp.py:12:83: E231 missing whitespace after ','
col = ['Year ending','Local Government Area','Suburb/Town Name','Offence Division','Offence Subdivision','Offence Subgroup']
                                                                                  ^
notebooks/Crime_Rate-tmp.py:12:105: E231 missing whitespace after ','
col = ['Year ending','Local Government Area','Suburb/Town Name','Offence Division','Offence Subdivision','Offence Subgroup']
                                                                                                        ^
notebooks/Crime_Rate-tmp.py:13:31: E251 unexpected spaces around keyword / parameter equals
df_new = df_crime.drop(columns = col, axis = 1)
                              ^
notebooks/Crime_Rate-tmp.py:13:33: E251 unexpected spaces around keyword / parameter equals
df_new = df_crime.drop(columns = col, axis = 1)
                                ^
notebooks/Crime_Rate-tmp.py:13:43: E251 unexpected spaces around keyword / parameter equals
df_new = df_crime.drop(columns = col, axis = 1)
                                          ^
notebooks/Crime_Rate-tmp.py:13:45: E251 unexpected spaces around keyword / parameter equals
df_new = df_crime.drop(columns = col, axis = 1)
                                            ^
notebooks/Crime_Rate-tmp.py:33:42: E251 unexpected spaces around keyword / parameter equals
df_crime_rate = pd.DataFrame(lst, columns =['Postcode', 'Crime Rate'])
                                         ^
notebooks/Crime_Rate-tmp.py:35:1: E402 module level import not at top of file
from numpy import log
^
notebooks/Crime_Rate-tmp.py:37:66: E226 missing whitespace around arithmetic operator
df_crime_rate['zlogCrimerate'] = (df_crime_rate['log-crime-rate']-df_crime_rate['log-crime-rate'].mean())/df_crime_rate['log-crime-rate'].std()
                                                                 ^
notebooks/Crime_Rate-tmp.py:37:106: E226 missing whitespace around arithmetic operator
df_crime_rate['zlogCrimerate'] = (df_crime_rate['log-crime-rate']-df_crime_rate['log-crime-rate'].mean())/df_crime_rate['log-crime-rate'].std()
                                                                                                         ^
notebooks/Crime_Rate-tmp.py:43:61: E251 unexpected spaces around keyword / parameter equals
df_crime_rate.to_csv("../data/curated/Crime_Rate.csv", index = False)
                                                            ^
notebooks/Crime_Rate-tmp.py:43:63: E251 unexpected spaces around keyword / parameter equals
df_crime_rate.to_csv("../data/curated/Crime_Rate.csv", index = False)
                                                              ^
notebooks/joinpopu-income-tmp.py:37:10: E225 missing whitespace around operator
df_merged=df_merged.groupby(['suburb', 'Year']).agg({'population': 'sum',
         ^
notebooks/preprocessing-tmp.py:10:1: E265 block comment should start with '# '
#source after scraping, shown in the data/raw folder
^
notebooks/preprocessing-tmp.py:22:24: E231 missing whitespace after ','
df.drop_duplicates('id',inplace=True)
                       ^
notebooks/preprocessing-tmp.py:33:32: E225 missing whitespace around operator
df = df.drop(df[(df['latitude']=='None')|(df['longitude']=='None')].index)
                               ^
notebooks/preprocessing-tmp.py:33:41: E227 missing whitespace around bitwise or shift operator
df = df.drop(df[(df['latitude']=='None')|(df['longitude']=='None')].index)
                                        ^
notebooks/preprocessing-tmp.py:33:58: E225 missing whitespace around operator
df = df.drop(df[(df['latitude']=='None')|(df['longitude']=='None')].index)
                                                         ^
notebooks/preprocessing-tmp.py:36:35: W291 trailing whitespace
# process with regular expressions
                                  ^
notebooks/preprocessing-tmp.py:37:1: E302 expected 2 blank lines, found 1
def fun(txt):
^
notebooks/preprocessing-tmp.py:38:22: E261 at least two spaces before inline comment
    txt = txt.lower() #Change Uppercase to Lower case
                     ^
notebooks/preprocessing-tmp.py:38:23: E262 inline comment should start with '# '
    txt = txt.lower() #Change Uppercase to Lower case
                      ^
notebooks/preprocessing-tmp.py:38:54: W291 trailing whitespace
    txt = txt.lower() #Change Uppercase to Lower case
                                                     ^
notebooks/preprocessing-tmp.py:39:21: E231 missing whitespace after ','
    txt = re.sub(' ','',txt) #remove spaces
                    ^
notebooks/preprocessing-tmp.py:39:24: E231 missing whitespace after ','
    txt = re.sub(' ','',txt) #remove spaces
                       ^
notebooks/preprocessing-tmp.py:39:29: E261 at least two spaces before inline comment
    txt = re.sub(' ','',txt) #remove spaces
                            ^
notebooks/preprocessing-tmp.py:39:30: E262 inline comment should start with '# '
    txt = re.sub(' ','',txt) #remove spaces
                             ^
notebooks/preprocessing-tmp.py:39:44: W291 trailing whitespace
    txt = re.sub(' ','',txt) #remove spaces
                                           ^
notebooks/preprocessing-tmp.py:40:21: E231 missing whitespace after ','
    txt = re.sub(',','',txt) #remove comma ','，some numbers like 1,200, the comma needs to be removed for matching
                    ^
notebooks/preprocessing-tmp.py:40:24: E231 missing whitespace after ','
    txt = re.sub(',','',txt) #remove comma ','，some numbers like 1,200, the comma needs to be removed for matching
                       ^
notebooks/preprocessing-tmp.py:40:29: E261 at least two spaces before inline comment
    txt = re.sub(',','',txt) #remove comma ','，some numbers like 1,200, the comma needs to be removed for matching
                            ^
notebooks/preprocessing-tmp.py:40:30: E262 inline comment should start with '# '
    txt = re.sub(',','',txt) #remove comma ','，some numbers like 1,200, the comma needs to be removed for matching
                             ^
notebooks/preprocessing-tmp.py:41:19: W605 invalid escape sequence '\.'
    txt = re.sub('\.(\d+)','',txt) #process price data, remove decimal places - 250.00-->250
                  ^
notebooks/preprocessing-tmp.py:41:22: W605 invalid escape sequence '\d'
    txt = re.sub('\.(\d+)','',txt) #process price data, remove decimal places - 250.00-->250
                     ^
notebooks/preprocessing-tmp.py:41:27: E231 missing whitespace after ','
    txt = re.sub('\.(\d+)','',txt) #process price data, remove decimal places - 250.00-->250
                          ^
notebooks/preprocessing-tmp.py:41:30: E231 missing whitespace after ','
    txt = re.sub('\.(\d+)','',txt) #process price data, remove decimal places - 250.00-->250
                             ^
notebooks/preprocessing-tmp.py:41:35: E261 at least two spaces before inline comment
    txt = re.sub('\.(\d+)','',txt) #process price data, remove decimal places - 250.00-->250
                                  ^
notebooks/preprocessing-tmp.py:41:36: E262 inline comment should start with '# '
    txt = re.sub('\.(\d+)','',txt) #process price data, remove decimal places - 250.00-->250
                                   ^
notebooks/preprocessing-tmp.py:42:19: W605 invalid escape sequence '\.'
    txt = re.sub('\.','',txt) #remove'.'，p.w. also refers to perweek
                  ^
notebooks/preprocessing-tmp.py:42:22: E231 missing whitespace after ','
    txt = re.sub('\.','',txt) #remove'.'，p.w. also refers to perweek
                     ^
notebooks/preprocessing-tmp.py:42:25: E231 missing whitespace after ','
    txt = re.sub('\.','',txt) #remove'.'，p.w. also refers to perweek
                        ^
notebooks/preprocessing-tmp.py:42:30: E261 at least two spaces before inline comment
    txt = re.sub('\.','',txt) #remove'.'，p.w. also refers to perweek
                             ^
notebooks/preprocessing-tmp.py:42:31: E262 inline comment should start with '# '
    txt = re.sub('\.','',txt) #remove'.'，p.w. also refers to perweek
                              ^
notebooks/preprocessing-tmp.py:43:36: E231 missing whitespace after ','
    res = re.findall('/w|p/?w|week',txt) # extract key words like perweek,/week,week,pw,/pw,p/w...
                                   ^
notebooks/preprocessing-tmp.py:43:41: E261 at least two spaces before inline comment
    res = re.findall('/w|p/?w|week',txt) # extract key words like perweek,/week,week,pw,/pw,p/w...
                                        ^
notebooks/preprocessing-tmp.py:44:1: W293 blank line contains whitespace

^
notebooks/preprocessing-tmp.py:46:16: E225 missing whitespace around operator
    if len(res)==0:
               ^
notebooks/preprocessing-tmp.py:46:20: W291 trailing whitespace
    if len(res)==0:
                   ^
notebooks/preprocessing-tmp.py:48:1: W293 blank line contains whitespace

^
notebooks/preprocessing-tmp.py:49:24: W605 invalid escape sequence '\$'
    rent = re.findall('\$(\d+)',txt) #Extract the rental amount, which may contain both weekly and monthly rents, and return a matching string
                       ^
notebooks/preprocessing-tmp.py:49:27: W605 invalid escape sequence '\d'
    rent = re.findall('\$(\d+)',txt) #Extract the rental amount, which may contain both weekly and monthly rents, and return a matching string
                          ^
notebooks/preprocessing-tmp.py:49:32: E231 missing whitespace after ','
    rent = re.findall('\$(\d+)',txt) #Extract the rental amount, which may contain both weekly and monthly rents, and return a matching string
                               ^
notebooks/preprocessing-tmp.py:49:37: E261 at least two spaces before inline comment
    rent = re.findall('\$(\d+)',txt) #Extract the rental amount, which may contain both weekly and monthly rents, and return a matching string
                                    ^
notebooks/preprocessing-tmp.py:49:38: E262 inline comment should start with '# '
    rent = re.findall('\$(\d+)',txt) #Extract the rental amount, which may contain both weekly and monthly rents, and return a matching string
                                     ^
notebooks/preprocessing-tmp.py:50:1: W293 blank line contains whitespace

^
notebooks/preprocessing-tmp.py:52:17: E225 missing whitespace around operator
    if len(rent)==0:
                ^
notebooks/preprocessing-tmp.py:54:1: W293 blank line contains whitespace

^
notebooks/preprocessing-tmp.py:59:1: E305 expected 2 blank lines after class or function definition, found 1
df['price'] = df['price'].apply(fun)
^
notebooks/preprocessing-tmp.py:62:25: E225 missing whitespace around operator
df_new = df[(df['price']>=150) & (df['price']<=2000)]
                        ^
notebooks/preprocessing-tmp.py:62:46: E225 missing whitespace around operator
df_new = df[(df['price']>=150) & (df['price']<=2000)]
                                             ^
notebooks/preprocessing-tmp.py:65:25: E231 missing whitespace after ','
plt.hist(df_new['price'],bins=100)
                        ^
notebooks/preprocessing-tmp.py:69:82: E231 missing whitespace after ','
df_school = pd.read_csv('../data/raw/SchoolLocations2022_remove_non_relevant.csv',encoding='latin-1')
                                                                                 ^
notebooks/preprocessing-tmp.py:79:35: E231 missing whitespace after ','
sch_loc = df_school[['School_Name','School_Type','Y','X']]
                                  ^
notebooks/preprocessing-tmp.py:79:49: E231 missing whitespace after ','
sch_loc = df_school[['School_Name','School_Type','Y','X']]
                                                ^
notebooks/preprocessing-tmp.py:79:53: E231 missing whitespace after ','
sch_loc = df_school[['School_Name','School_Type','Y','X']]
                                                    ^
notebooks/preprocessing-tmp.py:79:59: W291 trailing whitespace
sch_loc = df_school[['School_Name','School_Type','Y','X']]
                                                          ^
notebooks/preprocessing-tmp.py:86:42: E225 missing whitespace around operator
pri_loc = sch_loc[(sch_loc['School_Type']=='Primary')|(sch_loc['School_Type']=='Pri/Sec')]
                                         ^
notebooks/preprocessing-tmp.py:86:54: E227 missing whitespace around bitwise or shift operator
pri_loc = sch_loc[(sch_loc['School_Type']=='Primary')|(sch_loc['School_Type']=='Pri/Sec')]
                                                     ^
notebooks/preprocessing-tmp.py:86:78: E225 missing whitespace around operator
pri_loc = sch_loc[(sch_loc['School_Type']=='Primary')|(sch_loc['School_Type']=='Pri/Sec')]
                                                                             ^
notebooks/preprocessing-tmp.py:87:42: E225 missing whitespace around operator
sec_loc = sch_loc[(sch_loc['School_Type']=='Secondary')|(sch_loc['School_Type']=='Pri/Sec')]
                                         ^
notebooks/preprocessing-tmp.py:87:56: E227 missing whitespace around bitwise or shift operator
sec_loc = sch_loc[(sch_loc['School_Type']=='Secondary')|(sch_loc['School_Type']=='Pri/Sec')]
                                                       ^
notebooks/preprocessing-tmp.py:87:80: E225 missing whitespace around operator
sec_loc = sch_loc[(sch_loc['School_Type']=='Secondary')|(sch_loc['School_Type']=='Pri/Sec')]
                                                                               ^
notebooks/preprocessing-tmp.py:88:44: E225 missing whitespace around operator
other_loc = sch_loc[(sch_loc['School_Type']=='Special')|(sch_loc['School_Type']=='Language')|(sch_loc['School_Type']=='Camp')]
                                           ^
notebooks/preprocessing-tmp.py:88:56: E227 missing whitespace around bitwise or shift operator
other_loc = sch_loc[(sch_loc['School_Type']=='Special')|(sch_loc['School_Type']=='Language')|(sch_loc['School_Type']=='Camp')]
                                                       ^
notebooks/preprocessing-tmp.py:88:80: E225 missing whitespace around operator
other_loc = sch_loc[(sch_loc['School_Type']=='Special')|(sch_loc['School_Type']=='Language')|(sch_loc['School_Type']=='Camp')]
                                                                               ^
notebooks/preprocessing-tmp.py:88:93: E227 missing whitespace around bitwise or shift operator
other_loc = sch_loc[(sch_loc['School_Type']=='Special')|(sch_loc['School_Type']=='Language')|(sch_loc['School_Type']=='Camp')]
                                                                                            ^
notebooks/preprocessing-tmp.py:88:117: E225 missing whitespace around operator
other_loc = sch_loc[(sch_loc['School_Type']=='Special')|(sch_loc['School_Type']=='Language')|(sch_loc['School_Type']=='Camp')]
                                                                                                                    ^
notebooks/preprocessing-tmp.py:90:1: E302 expected 2 blank lines, found 1
def dist_fun(pos1,pos2):
^
notebooks/preprocessing-tmp.py:90:18: E231 missing whitespace after ','
def dist_fun(pos1,pos2):
                 ^
notebooks/preprocessing-tmp.py:94:17: E226 missing whitespace around arithmetic operator
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
                ^
notebooks/preprocessing-tmp.py:94:58: E226 missing whitespace around arithmetic operator
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
                                                         ^
notebooks/preprocessing-tmp.py:96:13: W291 trailing whitespace
    r = 6371
            ^
notebooks/preprocessing-tmp.py:97:31: E226 missing whitespace around arithmetic operator
    dis = round((c * r * 1000)/1000, 2)
                              ^
notebooks/preprocessing-tmp.py:101:1: E305 expected 2 blank lines after class or function definition, found 1
pri_dist = cdist(house_loc,pri_loc[['Y','X']],metric=dist_fun)
^
notebooks/preprocessing-tmp.py:101:27: E231 missing whitespace after ','
pri_dist = cdist(house_loc,pri_loc[['Y','X']],metric=dist_fun)
                          ^
notebooks/preprocessing-tmp.py:101:40: E231 missing whitespace after ','
pri_dist = cdist(house_loc,pri_loc[['Y','X']],metric=dist_fun)
                                       ^
notebooks/preprocessing-tmp.py:101:46: E231 missing whitespace after ','
pri_dist = cdist(house_loc,pri_loc[['Y','X']],metric=dist_fun)
                                             ^
notebooks/preprocessing-tmp.py:105:27: E231 missing whitespace after ','
sec_dist = cdist(house_loc,sec_loc[['Y','X']],metric=dist_fun)
                          ^
notebooks/preprocessing-tmp.py:105:40: E231 missing whitespace after ','
sec_dist = cdist(house_loc,sec_loc[['Y','X']],metric=dist_fun)
                                       ^
notebooks/preprocessing-tmp.py:105:46: E231 missing whitespace after ','
sec_dist = cdist(house_loc,sec_loc[['Y','X']],metric=dist_fun)
                                             ^
notebooks/preprocessing-tmp.py:109:29: E231 missing whitespace after ','
other_dist = cdist(house_loc,other_loc[['Y','X']],metric=dist_fun)
                            ^
notebooks/preprocessing-tmp.py:109:44: E231 missing whitespace after ','
other_dist = cdist(house_loc,other_loc[['Y','X']],metric=dist_fun)
                                           ^
notebooks/preprocessing-tmp.py:109:50: E231 missing whitespace after ','
other_dist = cdist(house_loc,other_loc[['Y','X']],metric=dist_fun)
                                                 ^
notebooks/preprocessing-tmp.py:114:1: E266 too many leading '#' for block comment
## To determine the name of the school. Take pri_dist as an example. Identify the nearest primary school.
^
notebooks/preprocessing-tmp.py:115:1: E266 too many leading '#' for block comment
## If needing more information, add a column name to ['School_Name'],
^
notebooks/preprocessing-tmp.py:116:1: E266 too many leading '#' for block comment
## adding the column for coordinates to acquire the specific value, ['School_Name'，'Y','X'].
^
notebooks/preprocessing-tmp.py:131:1: E265 block comment should start with '# '
#pd.Series(other_min_dist)
^
notebooks/preprocessing-tmp.py:137:1: E303 too many blank lines (3)
df_new['min_pri_longitude'] = pri_school_info['X'].values
^
notebooks/preprocessing-tmp.py:148:1: E303 too many blank lines (3)
import geopandas as gpd
^
notebooks/preprocessing-tmp.py:148:1: E402 module level import not at top of file
import geopandas as gpd
^
notebooks/preprocessing-tmp.py:150:1: E265 block comment should start with '# '
#source of train stations: https://discover.data.vic.gov.au/dataset/ptv-metro-train-stations
^
notebooks/preprocessing-tmp.py:152:1: E265 block comment should start with '# '
#source of tram stops: https://discover.data.vic.gov.au/dataset/ptv-metro-tram-stops
^
notebooks/preprocessing-tmp.py:159:35: E231 missing whitespace after ','
gpd_train = gpd_train[['STOP_NAME','STOP_ID','LATITUDE','LONGITUDE']]
                                  ^
notebooks/preprocessing-tmp.py:159:45: E231 missing whitespace after ','
gpd_train = gpd_train[['STOP_NAME','STOP_ID','LATITUDE','LONGITUDE']]
                                            ^
notebooks/preprocessing-tmp.py:159:56: E231 missing whitespace after ','
gpd_train = gpd_train[['STOP_NAME','STOP_ID','LATITUDE','LONGITUDE']]
                                                       ^
notebooks/preprocessing-tmp.py:165:29: E231 missing whitespace after ','
train_dist = cdist(house_loc,gpd_train[['LATITUDE','LONGITUDE']],metric=dist_fun)
                            ^
notebooks/preprocessing-tmp.py:165:51: E231 missing whitespace after ','
train_dist = cdist(house_loc,gpd_train[['LATITUDE','LONGITUDE']],metric=dist_fun)
                                                  ^
notebooks/preprocessing-tmp.py:165:65: E231 missing whitespace after ','
train_dist = cdist(house_loc,gpd_train[['LATITUDE','LONGITUDE']],metric=dist_fun)
                                                                ^
notebooks/preprocessing-tmp.py:171:50: E231 missing whitespace after ','
train_info = train.iloc[train_index][['STOP_NAME','STOP_ID','LATITUDE','LONGITUDE']]
                                                 ^
notebooks/preprocessing-tmp.py:171:60: E231 missing whitespace after ','
train_info = train.iloc[train_index][['STOP_NAME','STOP_ID','LATITUDE','LONGITUDE']]
                                                           ^
notebooks/preprocessing-tmp.py:171:71: E231 missing whitespace after ','
train_info = train.iloc[train_index][['STOP_NAME','STOP_ID','LATITUDE','LONGITUDE']]
                                                                      ^
notebooks/preprocessing-tmp.py:191:33: E231 missing whitespace after ','
gpd_tram = gpd_tram[['STOP_NAME','STOP_ID','LATITUDE','LONGITUDE']]
                                ^
notebooks/preprocessing-tmp.py:191:43: E231 missing whitespace after ','
gpd_tram = gpd_tram[['STOP_NAME','STOP_ID','LATITUDE','LONGITUDE']]
                                          ^
notebooks/preprocessing-tmp.py:191:54: E231 missing whitespace after ','
gpd_tram = gpd_tram[['STOP_NAME','STOP_ID','LATITUDE','LONGITUDE']]
                                                     ^
notebooks/preprocessing-tmp.py:197:28: E231 missing whitespace after ','
tram_dist = cdist(house_loc,gpd_tram[['LATITUDE','LONGITUDE']],metric=dist_fun)
                           ^
notebooks/preprocessing-tmp.py:197:49: E231 missing whitespace after ','
tram_dist = cdist(house_loc,gpd_tram[['LATITUDE','LONGITUDE']],metric=dist_fun)
                                                ^
notebooks/preprocessing-tmp.py:197:63: E231 missing whitespace after ','
tram_dist = cdist(house_loc,gpd_tram[['LATITUDE','LONGITUDE']],metric=dist_fun)
                                                              ^
notebooks/preprocessing-tmp.py:203:47: E231 missing whitespace after ','
tram_info = tram.iloc[tram_index][['STOP_NAME','STOP_ID','LATITUDE','LONGITUDE']]
                                              ^
notebooks/preprocessing-tmp.py:203:57: E231 missing whitespace after ','
tram_info = tram.iloc[tram_index][['STOP_NAME','STOP_ID','LATITUDE','LONGITUDE']]
                                                        ^
notebooks/preprocessing-tmp.py:203:68: E231 missing whitespace after ','
tram_info = tram.iloc[tram_index][['STOP_NAME','STOP_ID','LATITUDE','LONGITUDE']]
                                                                   ^
notebooks/preprocessing-tmp.py:222:1: E265 block comment should start with '# '
#source of bus stops: https://discover.data.vic.gov.au/dataset/ptv-metro-bus-stops1
^
notebooks/preprocessing-tmp.py:228:31: E231 missing whitespace after ','
gpd_bus = gpd_bus[['STOP_NAME','STOP_ID','LATITUDE','LONGITUDE']]
                              ^
notebooks/preprocessing-tmp.py:228:41: E231 missing whitespace after ','
gpd_bus = gpd_bus[['STOP_NAME','STOP_ID','LATITUDE','LONGITUDE']]
                                        ^
notebooks/preprocessing-tmp.py:228:52: E231 missing whitespace after ','
gpd_bus = gpd_bus[['STOP_NAME','STOP_ID','LATITUDE','LONGITUDE']]
                                                   ^
notebooks/preprocessing-tmp.py:235:20: W291 trailing whitespace
# if need to remove
                   ^
notebooks/preprocessing-tmp.py:236:1: E265 block comment should start with '# '
#gpd_bus = gpd_bus.drop_duplicates(subset = ['STOP_ID'], keep = 'first')
^
notebooks/preprocessing-tmp.py:240:27: E231 missing whitespace after ','
bus_dist = cdist(house_loc,gpd_bus[['LATITUDE','LONGITUDE']],metric=dist_fun)
                          ^
notebooks/preprocessing-tmp.py:240:47: E231 missing whitespace after ','
bus_dist = cdist(house_loc,gpd_bus[['LATITUDE','LONGITUDE']],metric=dist_fun)
                                              ^
notebooks/preprocessing-tmp.py:240:61: E231 missing whitespace after ','
bus_dist = cdist(house_loc,gpd_bus[['LATITUDE','LONGITUDE']],metric=dist_fun)
                                                            ^
notebooks/preprocessing-tmp.py:246:44: E231 missing whitespace after ','
bus_info = bus.iloc[bus_index][['STOP_NAME','STOP_ID','LATITUDE','LONGITUDE']]
                                           ^
notebooks/preprocessing-tmp.py:246:54: E231 missing whitespace after ','
bus_info = bus.iloc[bus_index][['STOP_NAME','STOP_ID','LATITUDE','LONGITUDE']]
                                                     ^
notebooks/preprocessing-tmp.py:246:65: E231 missing whitespace after ','
bus_info = bus.iloc[bus_index][['STOP_NAME','STOP_ID','LATITUDE','LONGITUDE']]
                                                                ^
notebooks/preprocessing-tmp.py:266:1: E303 too many blank lines (3)
path_park = r'../data/raw/PARKRES.shp'
^
notebooks/preprocessing-tmp.py:267:1: E265 block comment should start with '# '
#source of parks and conservation reserves: https://discover.data.vic.gov.au/dataset/parks-and-conservation-reserves-parkres
^
notebooks/preprocessing-tmp.py:278:1: E266 too many leading '#' for block comment
## Using DataFrame.drop_duplicates() to keep first duplicate row based on specific column - PRIMS_ID
^
notebooks/preprocessing-tmp.py:278:1: E303 too many blank lines (3)
## Using DataFrame.drop_duplicates() to keep first duplicate row based on specific column - PRIMS_ID
^
notebooks/preprocessing-tmp.py:279:43: E251 unexpected spaces around keyword / parameter equals
gpd_park = gpd_park.drop_duplicates(subset = ['PRIMS_ID'], keep = 'first')
                                          ^
notebooks/preprocessing-tmp.py:279:45: E251 unexpected spaces around keyword / parameter equals
gpd_park = gpd_park.drop_duplicates(subset = ['PRIMS_ID'], keep = 'first')
                                            ^
notebooks/preprocessing-tmp.py:279:64: E251 unexpected spaces around keyword / parameter equals
gpd_park = gpd_park.drop_duplicates(subset = ['PRIMS_ID'], keep = 'first')
                                                               ^
notebooks/preprocessing-tmp.py:279:66: E251 unexpected spaces around keyword / parameter equals
gpd_park = gpd_park.drop_duplicates(subset = ['PRIMS_ID'], keep = 'first')
                                                                 ^
notebooks/preprocessing-tmp.py:283:1: E402 module level import not at top of file
from shapely.geometry import Polygon, LineString, Point
^
notebooks/preprocessing-tmp.py:285:28: E231 missing whitespace after ','
gpd_park = gpd_park[['NAME','PRIMS_ID','geometry']]
                           ^
notebooks/preprocessing-tmp.py:285:39: E231 missing whitespace after ','
gpd_park = gpd_park[['NAME','PRIMS_ID','geometry']]
                                      ^
notebooks/preprocessing-tmp.py:297:50: E231 missing whitespace after ','
park_dist = cdist(house_loc, gpd_park[['Latitude','Longitude']],metric=dist_fun)
                                                 ^
notebooks/preprocessing-tmp.py:297:64: E231 missing whitespace after ','
park_dist = cdist(house_loc, gpd_park[['Latitude','Longitude']],metric=dist_fun)
                                                               ^
notebooks/preprocessing-tmp.py:303:42: E231 missing whitespace after ','
park_info = park.iloc[park_index][['NAME','PRIMS_ID','Latitude','Longitude']]
                                         ^
notebooks/preprocessing-tmp.py:303:53: E231 missing whitespace after ','
park_info = park.iloc[park_index][['NAME','PRIMS_ID','Latitude','Longitude']]
                                                    ^
notebooks/preprocessing-tmp.py:303:64: E231 missing whitespace after ','
park_info = park.iloc[park_index][['NAME','PRIMS_ID','Latitude','Longitude']]
                                                               ^
notebooks/preprocessing-tmp.py:323:1: E303 too many blank lines (3)
df_new = df_new.drop(df_new[(df_new['suburb']=='Adelaide')].index)
^
notebooks/preprocessing-tmp.py:323:46: E225 missing whitespace around operator
df_new = df_new.drop(df_new[(df_new['suburb']=='Adelaide')].index)
                                             ^
notebooks/preprocessing-tmp.py:327:1: E303 too many blank lines (3)
df_new
^
notebooks/preprocessing-tmp.py:329:52: E231 missing whitespace after ','
df_new.to_csv('../data/curated/realestate_coor.csv',index = False)
                                                   ^
notebooks/preprocessing-tmp.py:329:58: E251 unexpected spaces around keyword / parameter equals
df_new.to_csv('../data/curated/realestate_coor.csv',index = False)
                                                         ^
notebooks/preprocessing-tmp.py:329:60: E251 unexpected spaces around keyword / parameter equals
df_new.to_csv('../data/curated/realestate_coor.csv',index = False)
                                                           ^
notebooks/preprocessing-tmp.py:331:1: W391 blank line at end of file

^
notebooks/adding_ICSEA-tmp.py:20:1: E302 expected 2 blank lines, found 1
def get_school_info(school_location_csv_file, school_profile_excel_file, excel_file_sheet_name):
^
notebooks/adding_ICSEA-tmp.py:40:115: E231 missing whitespace after ':'
        school_info_dict[row_school_name] = {'type': row_school_type, 'latitude': row_school_latitude, 'longitude':row_school_longitude,
                                                                                                                  ^
notebooks/adding_ICSEA-tmp.py:41:95: E231 missing whitespace after ':'
                                             'school_no': row_school_no, 'school_address_town':row_school_address_town,
                                                                                              ^
notebooks/adding_ICSEA-tmp.py:60:1: E302 expected 2 blank lines, found 1
def update_csv_with_school_info(realestate_csv_file, school_loc_csv_file, school_profile_excel_file, excel_file_sheet_name,
^
notebooks/adding_ICSEA-tmp.py:71:10: E211 whitespace before '('
    print ("====== realestate_csv_file {}, row_count {}, column_count {}".format(realestate_csv_file, row_count, column_count))
         ^
notebooks/adding_ICSEA-tmp.py:82:47: E226 missing whitespace around arithmetic operator
    column_names.insert(index_min_pri_latitude+1, 'min_pri_icsea')
                                              ^
notebooks/adding_ICSEA-tmp.py:83:1: W293 blank line contains whitespace

^
notebooks/adding_ICSEA-tmp.py:90:47: E226 missing whitespace around arithmetic operator
    column_names.insert(index_min_sec_latitude+1, 'min_sec_icsea')
                                              ^
notebooks/adding_ICSEA-tmp.py:91:1: W293 blank line contains whitespace

^
notebooks/adding_ICSEA-tmp.py:130:69: E127 continuation line over-indented for visual indent
                                                                    row_min_pri_longitude, df['min_pri_icsea'],
                                                                    ^
notebooks/adding_ICSEA-tmp.py:131:69: E127 continuation line over-indented for visual indent
                                                                    row_min_sec_latitude, row_min_sec_longitude,
                                                                    ^
notebooks/adding_ICSEA-tmp.py:132:69: E127 continuation line over-indented for visual indent
                                                                    df['min_sec_icsea'], school_name))
                                                                    ^
notebooks/adding_ICSEA-tmp.py:145:1: E305 expected 2 blank lines after class or function definition, found 1
if __name__ == '__main__':
^
notebooks/adding_ICSEA-tmp.py:155:5: E303 too many blank lines (2)
    start = time.time()
    ^
notebooks/adding_ICSEA-tmp.py:159:5: E722 do not use bare 'except'
    except:
    ^
notebooks/adding_ICSEA-tmp.py:166:10: E211 whitespace before '('
    print ("\n====== end ======\n")
         ^
notebooks/adding_ICSEA-tmp.py:168:1: W391 blank line at end of file

^
notebooks/question-two-modelling-analysis-tmp.py:7:19: E225 missing whitespace around operator
df = df[df['Type']=='All properties']
                  ^
notebooks/question-two-modelling-analysis-tmp.py:9:1: E302 expected 2 blank lines, found 1
def percent_growth(row):
^
notebooks/question-two-modelling-analysis-tmp.py:12:1: E305 expected 2 blank lines after class or function definition, found 1
df['Sub'].apply(percent_growth)
^
notebooks/question-two-modelling-analysis-tmp.py:14:14: E225 missing whitespace around operator
df[(df['Sub']=='Oak Park') & (df['Type']=='All properties')]
             ^
notebooks/question-two-modelling-analysis-tmp.py:14:41: E225 missing whitespace around operator
df[(df['Sub']=='Oak Park') & (df['Type']=='All properties')]
                                        ^
notebooks/transformSA2toSub-tmp.py:34:39: E711 comparison to None should be 'if cond is not None:'
sa22016 = sa22016[sa22016['geometry'] != None]
                                      ^
notebooks/transformSA2toSub-tmp.py:44:39: E711 comparison to None should be 'if cond is not None:'
sa22021 = sa22021[sa22021['geometry'] != None]
                                      ^
notebooks/historical_data-tmp.py:5:1: E265 block comment should start with '# '
#read file, sheet_name=None to read multiple sheets
^
notebooks/historical_data-tmp.py:6:93: E231 missing whitespace after ','
dict_df = pd.read_excel("../data/raw/Moving annual rent by suburb - March Quarter 2021.xlsx",sheet_name=None,header=None)
                                                                                            ^
notebooks/historical_data-tmp.py:6:109: E231 missing whitespace after ','
dict_df = pd.read_excel("../data/raw/Moving annual rent by suburb - March Quarter 2021.xlsx",sheet_name=None,header=None)
                                                                                                            ^
notebooks/historical_data-tmp.py:7:1: E265 block comment should start with '# '
#Source of Hisotrical rental data: https://www.dhhs.vic.gov.au/past-rental-reports
^
notebooks/historical_data-tmp.py:8:1: E265 block comment should start with '# '
#Rental Report 2021: Moving annualrents by suburb - March
^
notebooks/historical_data-tmp.py:10:1: E265 block comment should start with '# '
#Define function - gets the year of the last four bits of a string
^
notebooks/historical_data-tmp.py:11:1: E302 expected 2 blank lines, found 1
def get_year(s):
^
notebooks/historical_data-tmp.py:14:5: E722 do not use bare 'except'
    except:
    ^
notebooks/historical_data-tmp.py:17:1: E302 expected 2 blank lines, found 1
def get_month(s):
^
notebooks/historical_data-tmp.py:20:5: E722 do not use bare 'except'
    except:
    ^
notebooks/historical_data-tmp.py:23:1: E305 expected 2 blank lines after class or function definition, found 1
is_first = True
^
notebooks/historical_data-tmp.py:26:37: E231 missing whitespace after ','
        df = dict_df[sheet].iloc[2:4,:].copy() #header
                                    ^
notebooks/historical_data-tmp.py:26:47: E261 at least two spaces before inline comment
        df = dict_df[sheet].iloc[2:4,:].copy() #header
                                              ^
notebooks/historical_data-tmp.py:26:48: E262 inline comment should start with '# '
        df = dict_df[sheet].iloc[2:4,:].copy() #header
                                               ^
notebooks/historical_data-tmp.py:27:36: E231 missing whitespace after ','
        df = df.fillna(method="pad",axis=1)#Fill in the missing values with the previous column
                                   ^
notebooks/historical_data-tmp.py:27:44: E261 at least two spaces before inline comment
        df = df.fillna(method="pad",axis=1)#Fill in the missing values with the previous column
                                           ^
notebooks/historical_data-tmp.py:27:44: E262 inline comment should start with '# '
        df = df.fillna(method="pad",axis=1)#Fill in the missing values with the previous column
                                           ^
notebooks/historical_data-tmp.py:29:38: E231 missing whitespace after ','
    df_sheet = dict_df[sheet].iloc[4:,].copy()
                                     ^
notebooks/historical_data-tmp.py:30:30: E261 at least two spaces before inline comment
    df_sheet["types"] = sheet #Adding a 'type' column
                             ^
notebooks/historical_data-tmp.py:30:31: E262 inline comment should start with '# '
    df_sheet["types"] = sheet #Adding a 'type' column
                              ^
notebooks/historical_data-tmp.py:31:29: E261 at least two spaces before inline comment
    df = df.append(df_sheet) #merge to the main table
                            ^
notebooks/historical_data-tmp.py:31:30: E262 inline comment should start with '# '
    df = df.append(df_sheet) #merge to the main table
                             ^
notebooks/historical_data-tmp.py:34:12: E261 at least two spaces before inline comment
df_T = df.T # Transpose in numpy, for logical indexing
           ^
notebooks/historical_data-tmp.py:35:27: E231 missing whitespace after ','
df_T["year"] = df_T.iloc[:,0].apply(get_year) #apply (get_year) to obtain column 'year'
                          ^
notebooks/historical_data-tmp.py:35:46: E261 at least two spaces before inline comment
df_T["year"] = df_T.iloc[:,0].apply(get_year) #apply (get_year) to obtain column 'year'
                                             ^
notebooks/historical_data-tmp.py:35:47: E262 inline comment should start with '# '
df_T["year"] = df_T.iloc[:,0].apply(get_year) #apply (get_year) to obtain column 'year'
                                              ^
notebooks/historical_data-tmp.py:36:28: E231 missing whitespace after ','
df_T["month"] = df_T.iloc[:,0].apply(get_month) #apply (get_month) to obtain column 'month'
                           ^
notebooks/historical_data-tmp.py:36:48: E261 at least two spaces before inline comment
df_T["month"] = df_T.iloc[:,0].apply(get_month) #apply (get_month) to obtain column 'month'
                                               ^
notebooks/historical_data-tmp.py:36:49: E262 inline comment should start with '# '
df_T["month"] = df_T.iloc[:,0].apply(get_month) #apply (get_month) to obtain column 'month'
                                                ^
notebooks/historical_data-tmp.py:37:116: E261 at least two spaces before inline comment
df_T = df_T.loc[((df_T["year"] >= 2016) & (df_T["year"] <= 2021) & (df_T["month"] == "Jun")) | df_T["year"].isna()] #Keep rows with year of 2016-2021 and null values
                                                                                                                   ^
notebooks/historical_data-tmp.py:37:117: E262 inline comment should start with '# '
df_T = df_T.loc[((df_T["year"] >= 2016) & (df_T["year"] <= 2021) & (df_T["month"] == "Jun")) | df_T["year"].isna()] #Keep rows with year of 2016-2021 and null values
                                                                                                                    ^
notebooks/historical_data-tmp.py:38:37: E202 whitespace before ')'
df_T = df_T.loc[(df_T[3] == "Median" )|df_T[3].isna() ] #keep median column
                                    ^
notebooks/historical_data-tmp.py:38:39: E227 missing whitespace around bitwise or shift operator
df_T = df_T.loc[(df_T[3] == "Median" )|df_T[3].isna() ] #keep median column
                                      ^
notebooks/historical_data-tmp.py:38:54: E202 whitespace before ']'
df_T = df_T.loc[(df_T[3] == "Median" )|df_T[3].isna() ] #keep median column
                                                     ^
notebooks/historical_data-tmp.py:38:56: E261 at least two spaces before inline comment
df_T = df_T.loc[(df_T[3] == "Median" )|df_T[3].isna() ] #keep median column
                                                       ^
notebooks/historical_data-tmp.py:38:57: E262 inline comment should start with '# '
df_T = df_T.loc[(df_T[3] == "Median" )|df_T[3].isna() ] #keep median column
                                                        ^
notebooks/historical_data-tmp.py:39:12: E231 missing whitespace after ','
del df_T[3],df_T[2] #remove unnecessary columns
           ^
notebooks/historical_data-tmp.py:39:20: E261 at least two spaces before inline comment
del df_T[3],df_T[2] #remove unnecessary columns
                   ^
notebooks/historical_data-tmp.py:39:21: E262 inline comment should start with '# '
del df_T[3],df_T[2] #remove unnecessary columns
                    ^
notebooks/historical_data-tmp.py:40:18: E261 at least two spaces before inline comment
del df_T["month"]#remove month column
                 ^
notebooks/historical_data-tmp.py:40:18: E262 inline comment should start with '# '
del df_T["month"]#remove month column
                 ^
notebooks/historical_data-tmp.py:41:17: E261 at least two spaces before inline comment
del df_T["year"]#remove year column
                ^
notebooks/historical_data-tmp.py:41:17: E262 inline comment should start with '# '
del df_T["year"]#remove year column
                ^
notebooks/historical_data-tmp.py:42:16: E261 at least two spaces before inline comment
df_all = df_T.T #transpose
               ^
notebooks/historical_data-tmp.py:42:17: E262 inline comment should start with '# '
df_all = df_T.T #transpose
                ^
notebooks/historical_data-tmp.py:43:63: E261 at least two spaces before inline comment
df_all.columns = ["Sub", 2016, 2017, 2018, 2019, 2020, "Type"] #Set the column name
                                                              ^
notebooks/historical_data-tmp.py:43:64: E262 inline comment should start with '# '
df_all.columns = ["Sub", 2016, 2017, 2018, 2019, 2020, "Type"] #Set the column name
                                                               ^
notebooks/historical_data-tmp.py:95:23: E231 missing whitespace after ','
for year in range(2016,2021):
                      ^
notebooks/historical_data-tmp.py:96:48: W291 trailing whitespace
    df_year = newdf_all[["Sub", "Type"]].copy()
                                               ^
notebooks/historical_data-tmp.py:98:30: E222 multiple spaces after operator
    df_year["Median_Price"] =  newdf_all[year].copy()
                             ^
notebooks/historical_data-tmp.py:105:1: E265 block comment should start with '# '
#output to csv
^
reST docstrings PASSED✓ for notebooks/visualise-on-map.ipynb
PEP8 guidelines PASSED✓ for notebooks/visualise-on-map.ipynb
reST docstrings PASSED✓ for notebooks/question-three-modelling-analysis.ipynb
PEP8 guidelines PASSED✓ for notebooks/question-three-modelling-analysis.ipynb
reST docstrings PASSED✓ for notebooks/popu_incomepredict.ipynb
PEP8 guidelines FAILED❌ for notebooks/popu_incomepredict.ipynb
reST docstrings PASSED✓ for notebooks/Crime_Rate.ipynb
PEP8 guidelines FAILED❌ for notebooks/Crime_Rate.ipynb
reST docstrings PASSED✓ for notebooks/joinpopu-income.ipynb
PEP8 guidelines FAILED❌ for notebooks/joinpopu-income.ipynb
reST docstrings FAILED❌ for notebooks/preprocessing.ipynb
functions missing reST docstrings:
 - fun(txt)
PEP8 guidelines FAILED❌ for notebooks/preprocessing.ipynb
reST docstrings FAILED❌ for notebooks/adding_ICSEA.ipynb
functions missing reST docstrings:
 - get_school_info(school_location_csv_file, school_profile_excel_file, excel_file_sheet_name)
PEP8 guidelines FAILED❌ for notebooks/adding_ICSEA.ipynb
reST docstrings PASSED✓ for notebooks/question-two-modelling-analysis.ipynb
PEP8 guidelines FAILED❌ for notebooks/question-two-modelling-analysis.ipynb
reST docstrings PASSED✓ for notebooks/question-one-modelling.ipynb
PEP8 guidelines PASSED✓ for notebooks/question-one-modelling.ipynb
reST docstrings PASSED✓ for notebooks/question-one-analysis.ipynb
PEP8 guidelines PASSED✓ for notebooks/question-one-analysis.ipynb
reST docstrings PASSED✓ for notebooks/transformSA2toSub.ipynb
PEP8 guidelines FAILED❌ for notebooks/transformSA2toSub.ipynb
reST docstrings FAILED❌ for notebooks/historical_data.ipynb
functions missing reST docstrings:
 - get_year(s)
 - get_month(s)
PEP8 guidelines FAILED❌ for notebooks/historical_data.ipynb
reST docstrings PASSED✓ for scripts/OpenRouteService_cbd.py
PEP8 guidelines PASSED✓ for scripts/OpenRouteService_cbd.py
reST docstrings PASSED✓ for scripts/OpenRouteService.py
PEP8 guidelines PASSED✓ for scripts/OpenRouteService.py
reST docstrings PASSED✓ for scripts/ipynb.py
PEP8 guidelines PASSED✓ for scripts/ipynb.py
reST docstrings PASSED✓ for scripts/__init__.py
PEP8 guidelines PASSED✓ for scripts/__init__.py
reST docstrings PASSED✓ for scripts/repo-linter.py
PEP8 guidelines PASSED✓ for scripts/repo-linter.py
reST docstrings PASSED✓ for scripts/engineer-metrics.py
PEP8 guidelines PASSED✓ for scripts/engineer-metrics.py
reST docstrings PASSED✓ for scripts/DataScraping.py
PEP8 guidelines PASSED✓ for scripts/DataScraping.py
